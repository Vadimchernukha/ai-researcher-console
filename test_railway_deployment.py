#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Railway –¥–µ–ø–ª–æ—è
"""

import requests
import json
import time
import sys

def test_railway_deployment(base_url="http://localhost:8000"):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API"""
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –Ω–∞ {base_url}")
    
    tests = [
        {
            "name": "Health Check",
            "method": "GET",
            "endpoint": "/health",
            "expected_status": 200
        },
        {
            "name": "Available Profiles",
            "method": "GET", 
            "endpoint": "/profiles",
            "expected_status": 200
        }
    ]
    
    results = []
    
    for test in tests:
        try:
            print(f"\nüìã {test['name']}...")
            
            if test["method"] == "GET":
                response = requests.get(f"{base_url}{test['endpoint']}", timeout=10)
            
            if response.status_code == test["expected_status"]:
                print(f"‚úÖ {test['name']} - OK ({response.status_code})")
                if response.headers.get('content-type', '').startswith('application/json'):
                    data = response.json()
                    print(f"   Response: {json.dumps(data, indent=2)[:200]}...")
                results.append(True)
            else:
                print(f"‚ùå {test['name']} - FAILED ({response.status_code})")
                print(f"   Response: {response.text[:200]}...")
                results.append(False)
                
        except requests.RequestException as e:
            print(f"‚ùå {test['name']} - CONNECTION ERROR: {e}")
            results.append(False)
        except Exception as e:
            print(f"‚ùå {test['name']} - ERROR: {e}")
            results.append(False)
    
    # –ò—Ç–æ–≥–∏
    passed = sum(results)
    total = len(results)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚úÖ –ü—Ä–æ—à–ª–æ: {passed}/{total}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        return True
    else:
        print("\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        return False

def wait_for_api(base_url="http://localhost:8000", timeout=60):
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ API"""
    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ API –Ω–∞ {base_url}...")
    
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            response = requests.get(f"{base_url}/health", timeout=5)
            if response.status_code == 200:
                print("‚úÖ API –∑–∞–ø—É—â–µ–Ω!")
                return True
        except requests.RequestException:
            pass
        
        time.sleep(2)
        print(".", end="", flush=True)
    
    print(f"\n‚ùå API –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
    return False

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    else:
        base_url = "http://localhost:8000"
    
    print("üöÄ Railway Deployment Test")
    print("=" * 50)
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ API
    if wait_for_api(base_url):
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        success = test_railway_deployment(base_url)
        sys.exit(0 if success else 1)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–ø—É—Å–∫–∞ API")
        sys.exit(1)
