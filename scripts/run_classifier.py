# run_enhanced.py
"""
–ó–∞–ø—É—Å–∫ 6-—ç—Ç–∞–ø–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import os
import sys
import argparse

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
input_file = 'data/sample_domains.csv'
if not os.path.exists(input_file):
    print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å –¥–æ–º–µ–Ω–∞–º–∏ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—É—Ç—å")
    print("   –ü—Ä–∏–º–µ—Ä: python scripts/run_classifier.py --profile software --input your_file.csv")
    # –ù–µ –≤—ã—Ö–æ–¥–∏–º, –ø–æ–∑–≤–æ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª

try:
    # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–ª–æ–∂–∏—Ç—å –≤ ENV, –∑–∞—Ç–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å main
    import sys
    import os
    sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    import asyncio
    AVAILABLE_PROFILES = [
        "software", "iso", "telemedicine", "pharma", "edtech",
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ - Client Profiles
        "marketing", "fintech", "healthtech", "elearning", "software_products",
        "salesforce_partner", "hubspot_partner", "aws", "shopify", 
        "ai_companies", "mobile_app", "recruiting", "banking", "platforms"
    ]

    parser = argparse.ArgumentParser()
    parser.add_argument("--profile", choices=AVAILABLE_PROFILES, default=None)
    parser.add_argument("--input", help="Input CSV file with domains", default="data/sample_domains.csv")
    parser.add_argument("--session", help="Logical session name (e.g., 'session 1')", default=None)
    parser.add_argument("--fail-fast", action="store_true", help="Stop processing on first critical error")
    args = parser.parse_args()

    # 1) –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Ñ–ª–∞–≥–∞
    selected_profile = args.profile

    # 2) –ï—Å–ª–∏ —Ñ–ª–∞–≥ –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –±–µ—Ä–µ–º –∏–∑ env
    if not selected_profile:
        selected_profile = os.environ.get("PROFILE")

    # 3) –ï—Å–ª–∏ –Ω–µ—Ç –∏ –≤ env ‚Äî —Å–ø—Ä–æ—Å–∏–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ
    if not selected_profile:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∏—Å–∫–∞/–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        for idx, name in enumerate(AVAILABLE_PROFILES, 1):
            print(f"  {idx}. {name}")
        try:
            choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ").strip()
            if not choice:
                selected_profile = AVAILABLE_PROFILES[0]
            else:
                choice_idx = int(choice)
                if 1 <= choice_idx <= len(AVAILABLE_PROFILES):
                    selected_profile = AVAILABLE_PROFILES[choice_idx - 1]
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: software")
                    selected_profile = AVAILABLE_PROFILES[0]
        except Exception:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤—ã–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: software")
            selected_profile = AVAILABLE_PROFILES[0]

    # –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å/—Å–µ—Å—Å–∏—é –≤–Ω–∏–∑ –ø–æ –ø–∞–π–ø–ª–∞–π–Ω—É —á–µ—Ä–µ–∑ env –î–û –∏–º–ø–æ—Ä—Ç–∞ main (–≤–∞–∂–Ω–æ –¥–ª—è –ø—É—Ç–µ–π —Ñ–∞–π–ª–æ–≤)
    os.environ["PROFILE"] = selected_profile
    if args.session:
        os.environ["SESSION"] = args.session
    if args.fail_fast:
        os.environ["FAIL_FAST"] = "true"
    print(f"–ü—Ä–æ—Ñ–∏–ª—å: {selected_profile} | –°–µ—Å—Å–∏—è: {os.environ.get('SESSION','session 1')}")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º main –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PROFILE
    from src.main import main

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(main(profile=selected_profile, input_file=args.input, fail_fast=args.fail_fast))
    
except ImportError as e:
    print(f"‚ùå –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e}")
    print("üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install psutil")
    
except Exception as e:
    print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
    print("üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é: python src/main.py")
    
    import traceback
    traceback.print_exc()
